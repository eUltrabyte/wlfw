#pragma once
#ifndef WLFW_WINDOW_WIN32_HEADER
#define WLFW_WINDOW_WIN32_HEADER

#include "../NativeWindow.hpp"

namespace wl {
    ////////////////////////////////////////////////////////////
    /// \brief Function Which Convert Winapi Key Numbers To wl::Keys Enum Variables
    ///
    ////////////////////////////////////////////////////////////
    extern int WLFW_API ConvertWin32KeyToFixedKey(int key);

    ////////////////////////////////////////////////////////////
    /// \brief Window Win32 Class
    ///
    ////////////////////////////////////////////////////////////
    class WLFW_API WindowWin32 : public NativeWindow {
    public:
        ////////////////////////////////////////////////////////////
        /// \brief WindowWin32 Constructor
        ///
        ////////////////////////////////////////////////////////////
        WindowWin32(const WindowProps& windowProps = WindowProps());

        ////////////////////////////////////////////////////////////
        /// \brief WindowWin32 Destructor
        ///
        ////////////////////////////////////////////////////////////
        virtual ~WindowWin32();

        ////////////////////////////////////////////////////////////
        /// \brief WindowWin32 Update Function
        ///
        ////////////////////////////////////////////////////////////
        virtual void Update();

        ////////////////////////////////////////////////////////////
        /// \brief WindowWin32 Set Event Handler Function
        ///
        ////////////////////////////////////////////////////////////
        virtual void SetEventHandler(const EventHandler& handler);

        ////////////////////////////////////////////////////////////
        /// \brief WindowWin32 Get Window Proc Function
        ///
        ////////////////////////////////////////////////////////////
        virtual LRESULT GetWindowProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam);

        ////////////////////////////////////////////////////////////
        /// \brief WindowWin32 Get HWND Function
        ///
        ////////////////////////////////////////////////////////////
        virtual HWND& GetHWND();

        ////////////////////////////////////////////////////////////
        /// \brief WindowWin32 Get HINSTANCE Function
        ///
        ////////////////////////////////////////////////////////////
        virtual HINSTANCE& GetHINSTANCE();

        ////////////////////////////////////////////////////////////
        /// \brief WindowWin32 Get Event Handler Function
        ///
        ////////////////////////////////////////////////////////////
        virtual EventHandler& GetEventHandler();

    private:
        WNDCLASS m_windowClass;
        HINSTANCE m_hinstance;
        HWND m_hwnd;
        EventHandler m_handler;

    };

    using Window = WindowWin32;
};

#endif