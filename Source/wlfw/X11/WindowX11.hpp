#pragma once
#ifndef WLFW_WINDOW_X11_HEADER
#define WLFW_WINDOW_X11_HEADER

#include "../NativeWindow.hpp"

namespace wl {
    ////////////////////////////////////////////////////////////
    /// \brief Window X11 Class
    ///
    ////////////////////////////////////////////////////////////
    class WLFW_API WindowX11 : public NativeWindow {
    public:
        ////////////////////////////////////////////////////////////
        /// \brief WindowX11 Constructor
        ///
        ////////////////////////////////////////////////////////////
        WindowX11(const WindowProps& windowProps = WindowProps());

        ////////////////////////////////////////////////////////////
        /// \brief WindowX11 Destructor
        ///
        ////////////////////////////////////////////////////////////
        virtual ~WindowX11();

        ////////////////////////////////////////////////////////////
        /// \brief WindowX11 Update Function
        ///
        ////////////////////////////////////////////////////////////
        virtual void Update();

        ////////////////////////////////////////////////////////////
        /// \brief WindowX11 Set Event Handler Function
        ///
        ////////////////////////////////////////////////////////////
        virtual void SetEventHandler(const EventHandler& handler);

        ////////////////////////////////////////////////////////////
        /// \brief WindowX11 Get Display Function
        ///
        ////////////////////////////////////////////////////////////
        virtual Display*& GetDisplay();

        ////////////////////////////////////////////////////////////
        /// \brief WindowX11 Get Window Function
        ///
        ////////////////////////////////////////////////////////////
        virtual Window& GetWindow();

        ////////////////////////////////////////////////////////////
        /// \brief WindowX11 Get Event Handler Function
        ///
        ////////////////////////////////////////////////////////////
        virtual EventHandler& GetEventHandler();

    private:
        Display* m_display;
        ::Window m_window;
        XEvent m_event;
        Atom m_wmDeleteMessage;
        EventHandler m_handler;

    };

    using Window = WindowX11;
};

#endif